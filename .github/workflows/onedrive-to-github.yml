name: Sync OneDrive Images to GitHub

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'  # This runs the workflow every hour (adjust as needed)

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch images from OneDrive
        id: fetch_images
        run: |
          # Set your OneDrive access token
          ONEDRIVE_ACCESS_TOKEN="${{ secrets.ONEDRIVE_ACCESS_TOKEN }}"

          # Fetch images from OneDrive
          response=$(curl -s -X GET "https://graph.microsoft.com/v1.0/users/998e6817-e81a-4c40-a387-34c1ab27b201/drive/items/01KWR5ZX2PEZYK2OZVPFFLVJGAPE4RYQEU/children" \
            -H "Authorization: Bearer $ONEDRIVE_ACCESS_TOKEN")

          echo "$response" > response_log.txt

          # Parse image URLs safely
          urls=$(echo "$response" | jq -r '.value[] | select(.file) | {url: .["@microsoft.graph.downloadUrl"], name: .name} | "\(.url) \(.name)"')
          if [[ -z "$urls" ]]; then
              echo "No images found or error in fetching images."
              exit 1
          fi
          echo "$urls" > image_urls.txt
          
          # Ensure the directory exists
          mkdir -p downloaded_images

          # Download images
          while read -r url name; do
              # Sanitize the filename by limiting length and removing special characters
              extension="${name##*.}"  # Get the file extension
              sanitized_filename=$(echo "$name" | tr -dc '[:alnum:]._-' | cut -c1-30)  # Limit to 30 characters
              sanitized_filename="$sanitized_filename.$extension"  # Reattach the extension

              # Check if the image already exists
              if [[ ! -f "downloaded_images/$sanitized_filename" ]]; then
                  # Download the image
                  if curl -L -o "downloaded_images/$sanitized_filename" "$url"; then
                      echo "Downloaded: $sanitized_filename"
                  else
                      echo "Failed to download: $url"
                  fi
              else
                  echo "Image already exists: $sanitized_filename"
              fi
          done < image_urls.txt

      - name: Commit new images to GitHub
        run: |
          git config --local user.name "biteam2024"
          git config --local user.email "bi.analytics@arthdesignbuild.com"

          # Check if there are any new images to commit
          if [ "$(ls -A downloaded_images)" ]; then  # Check if the directory is not empty
              git add downloaded_images/*
              git commit -m "Add new images from OneDrive"
              git push
          else
              echo "No new images to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for pushing changes
