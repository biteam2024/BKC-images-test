name: Sync OneDrive Images to GitHub

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'  # This runs the workflow every hour (adjust as needed)

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch images from OneDrive
        id: fetch_images
        run: |
          # Set your OneDrive access token and folder path
          ONEDRIVE_ACCESS_TOKEN="${{ secrets.ONEDRIVE_ACCESS_TOKEN }}"

          # Fetch images from OneDrive
          response=$(curl -s -X GET "https://graph.microsoft.com/v1.0/users/998e6817-e81a-4c40-a387-34c1ab27b201/drive/items/01KWR5ZX2PEZYK2OZVPFFLVJGAPE4RYQEU/children" \
            -H "Authorization: Bearer $ONEDRIVE_ACCESS_TOKEN")

          echo "$response" > response_log.txt

          # Parse image URLs safely (only select image files)
          urls=$(echo "$response" | jq -r '.value[] | select(.file and (.file.mimeType | startswith("image/"))) | .["@microsoft.graph.downloadUrl"] // empty')
          if [[ -z "$urls" ]]; then
              echo "No images found or error in fetching images."
              exit 1
          fi
          echo "$urls" > image_urls.txt
          
          # Download images with truncated filenames
          mkdir -p downloaded_images
          while read -r url; do
              original_filename=$(basename "$url")
              # Truncate the filename to a maximum of 30 characters (keeping extension)
              truncated_filename=$(echo "$original_filename" | cut -c 1-30)
              # Ensure the extension is preserved
              extension="${truncated_filename##*.}"
              truncated_filename="${truncated_filename%.*}.$extension"

              # Remove any spaces from the filename
              truncated_filename=$(echo "$truncated_filename" | tr -d '[:space:]')

              # Download the image
              curl -L -o "downloaded_images/$truncated_filename" "$url"
          done < image_urls.txt

      - name: Check for new images
        id: check_images
        run: |
          # List existing images in the repo
          existing_images=$(ls downloaded_images)

          # Compare downloaded images with existing images
          new_images=()
          for file in downloaded_images/*; do
              filename=$(basename "$file")
              if [[ ! " ${existing_images[@]} " =~ " ${filename} " ]]; then
                  new_images+=("$filename")
              fi
          done

          # Save the new images list for the next step
          if [ ${#new_images[@]} -eq 0 ]; then
              echo "No new images to commit."
              exit 0
          fi

          # Convert array to newline-separated string
          IFS=$'\n' echo "${new_images[@]}" > new_images.txt
          echo "New images found: ${new_images[@]}"

      - name: Commit new images to GitHub
        run: |
          git config --local user.name "biteam2024"
          git config --local user.email "bi.analytics@arthdesignbuild.com"

          # Read new images from file and add them to git
          if [ -f new_images.txt ]; then
              while read -r new_image; do
                  # Enclose filename in quotes to handle spaces
                  git add "downloaded_images/$new_image"
              done < new_images.txt

              # Commit if there are new images
              if ! git diff --cached --quiet; then
                  git commit -m "Add new images from OneDrive"
                  git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/biteam2024/BKC-images-test.git
              else
                  echo "No new images to commit."
              fi
          else
              echo "No new images to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for pushing changes
