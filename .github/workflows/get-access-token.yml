name: Get Access Token and Sync OneDrive Images to GitHub

on:
  workflow_dispatch:
  schedule:
    - cron: '0 11 * * 2,3'  # Runs every Tuesday and Wednesday at 11:00 AM UTC

jobs:
  get_access_token:
    runs-on: ubuntu-latest

    steps:
      - name: Request Access Token
        id: get_token
        run: |
          response=$(curl -X POST "https://login.microsoftonline.com/96f98c92-0eac-40be-80a7-9c8224a25a66/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=91597372-2261-4f87-9238-10af1457aeef&client_secret=ku.8Q~hgoBkxloBJC6ZVszUhFUleZWdQUmJibctx&scope=https://graph.microsoft.com/.default&grant_type=client_credentials")

          # Extract access token from response and handle errors
          access_token=$(echo "$response" | jq -r '.access_token')
          echo "Access Token Length1: ${#access_token}"
          if [ -z "$access_token" ] || [ "$access_token" == "null" ]; then
            echo "Failed to retrieve access token. Full response: $response"
            exit 1
          fi
          
          # Store the access token in the environment file
          echo "access_token=$access_token" >> $GITHUB_ENV

  sync:
    runs-on: ubuntu-latest
    needs: get_access_token

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch images from OneDrive
        id: fetch_images
        run: |
          # Use the access token retrieved from the previous job
          access_token="${{ env.access_token }}"
          echo "Access Token Length2: ${#access_token}"

          # Fetch images from OneDrive using the access token
          response=$(curl -s -X GET "https://graph.microsoft.com/v1.0/users/998e6817-e81a-4c40-a387-34c1ab27b201/drive/items/01KWR5ZX2PEZYK2OZVPFFLVJGAPE4RYQEU/children" \
            -H "Authorization: Bearer $access_token")

          echo "$response" > response_log.txt  # Save response for debugging

          # Parse image URLs and names
          urls=$(echo "$response" | jq -r '.value[] | select(.file) | .["@microsoft.graph.downloadUrl"] // empty')
          names=$(echo "$response" | jq -r '.value[] | select(.file) | .name // empty')
          echo "ALL names: $names"
          echo "ALL urls: $urls"
          if [[ -z "$urls" || -z "$names" ]]; then
              echo "No images found or error in fetching images."
              exit 1
          fi

          # Download images
          mkdir -p downloaded_images
          paste <(echo "$urls") <(echo "$names") | while IFS=$'\t' read -r url name; do
              sanitized_filename=$(echo "$name" | tr -dc '[:alnum:]._-')
              sanitized_filename=$(echo "$sanitized_filename" | cut -c1-100)  # Limit to 100 characters

              # Download the image
              if curl -L -o "downloaded_images/$sanitized_filename" "$url"; then
                  echo "Downloaded: $sanitized_filename"
              else
                  echo "Failed to download: $url"
              fi
          done

      - name: Commit images to GitHub
        run: |
          git config --local user.name "biteam2024"
          git config --local user.email "bi.analytics@arthdesignbuild.com"
          if [ -n "$(ls -A downloaded_images)" ]; then
              git add downloaded_images/*
              git commit -m "Add images from OneDrive"
              git push
          else
              echo "No new images to add."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for pushing changes
